// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Persona
import AVFoundation
import AVKit
import Dispatch
import Foundation
import Lottie
import Metal
import MetalKit
import MetalPerformanceShaders
import MobileCoreServices
@_exported import Persona
import Photos
import SVGKit
import SafariServices
import Swift
import UIKit
import Vision
import VisionKit
import os
public protocol InquiryDelegate : AnyObject {
  func inquirySuccess(inquiryId: Swift.String, attributes: Persona.Attributes, relationships: Persona.Relationships)
  func inquiryFailed(inquiryId: Swift.String, attributes: Persona.Attributes, relationships: Persona.Relationships)
  func inquiryCancelled()
  func inquiryError(_ error: Swift.Error)
}
public struct Attributes {
  public let birthdate: Foundation.Date?
  public let name: Persona.Attributes.Name?
  public let address: Persona.Attributes.Address?
  public struct Name {
    public let first: Swift.String?
    public let middle: Swift.String?
    public let last: Swift.String?
  }
  public struct Address {
    public let street1: Swift.String?
    public let street2: Swift.String?
    public let city: Swift.String?
    public let subdivision: Swift.String?
    public let postalCode: Swift.String?
    public let countryCode: Swift.String?
  }
}
public protocol Verification {
  var id: Swift.String { get }
  var status: Persona.Status { get }
}
public struct PhoneNumberVerification : Persona.Verification {
  public let id: Swift.String
  public let status: Persona.Status
}
public struct GovernmentIdVerification : Persona.Verification {
  public let id: Swift.String
  public let status: Persona.Status
}
public struct SelfieVerification : Persona.Verification {
  public let id: Swift.String
  public let status: Persona.Status
}
public struct DocumentVerification : Persona.Verification {
  public let id: Swift.String
  public let status: Persona.Status
}
public struct DatabaseVerification : Persona.Verification {
  public let id: Swift.String
  public let status: Persona.Status
}
final public class Inquiry {
  public static var versionNumber: Swift.String {
    get
  }
  public init(config: Persona.InquiryConfiguration, delegate: Persona.InquiryDelegate)
  final public func start(from viewController: UIKit.UIViewController)
  @objc deinit
}
public struct InquiryTheme {
  public var backgroundColor: UIKit.UIColor
  public var primaryColor: UIKit.UIColor
  public var darkPrimaryColor: UIKit.UIColor
  public var accentColor: UIKit.UIColor
  public var overlayBackgroundColor: UIKit.UIColor
  public var titleTextColor: UIKit.UIColor
  public var titleTextFont: UIKit.UIFont
  public var cardTitleTextFont: UIKit.UIFont
  public var bodyTextColor: UIKit.UIColor
  public var bodyTextFont: UIKit.UIFont
  public var footnoteTextColor: UIKit.UIColor
  public var footnoteTextFont: UIKit.UIFont
  public var formLabelTextColor: UIKit.UIColor
  public var formLabelTextFont: UIKit.UIFont
  public var textFieldTextColor: UIKit.UIColor
  public var textFieldBackgroundColor: UIKit.UIColor
  public var textFieldBorderColor: UIKit.UIColor
  public var textFieldCornerRadius: CoreGraphics.CGFloat
  public var textFieldFont: UIKit.UIFont
  public var textFieldPlaceholderFont: UIKit.UIFont
  public var pickerTextColor: UIKit.UIColor
  public var pickerTextFont: UIKit.UIFont
  public var buttonBackgroundColor: UIKit.UIColor
  public var buttonDisabledBackgroundColor: UIKit.UIColor
  public var buttonTouchedBackgroundColor: UIKit.UIColor
  public var buttonTextColor: UIKit.UIColor
  public var buttonDisabledTextColor: UIKit.UIColor
  public var buttonTextAlignment: UIKit.NSTextAlignment
  public var buttonCornerRadius: CoreGraphics.CGFloat
  public var buttonFont: UIKit.UIFont
  public var selectedCellBackgroundColor: UIKit.UIColor
  public var closeButtonTintColor: UIKit.UIColor
  public var cancelButtonBackgroundColor: UIKit.UIColor
  public var progressColor: UIKit.UIColor
  public init()
}
public enum Status {
  case passed
  case requiresRetry
  case failed
  public static func == (a: Persona.Status, b: Persona.Status) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Relationships {
  public let verifications: [Persona.Verification]
}
public enum Environment : Swift.String {
  case production
  case sandbox
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct InquiryConfiguration {
  public init(templateId: Swift.String, environment: Persona.Environment? = .production, note: Swift.String? = nil, theme: Persona.InquiryTheme? = nil)
  public init(templateId: Swift.String, referenceId: Swift.String, environment: Persona.Environment? = .production, note: Swift.String? = nil, theme: Persona.InquiryTheme? = nil)
  public init(templateId: Swift.String, accountId: Swift.String, environment: Persona.Environment? = .production, note: Swift.String? = nil, theme: Persona.InquiryTheme? = nil)
  public init(inquiryId: Swift.String, theme: Persona.InquiryTheme? = nil)
}
extension Persona.Status : Swift.Equatable {}
extension Persona.Status : Swift.Hashable {}
extension Persona.Environment : Swift.Equatable {}
extension Persona.Environment : Swift.Hashable {}
extension Persona.Environment : Swift.RawRepresentable {}
